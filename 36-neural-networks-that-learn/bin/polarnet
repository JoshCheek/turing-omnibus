#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path('../lib', __dir__)
require 'polarnet'
require 'json'

def self.assert!(explanation, expected, operator, actual)
  return if expected.__send__ operator, actual
  $stderr.puts "\e[31m" if $stderr.tty?
  $stderr.puts explanation
  $stderr.puts "\e[39m" if $stderr.tty?
  $stderr.puts
  $stderr.puts "ARGV:      #{ARGV.inspect}"
  $stderr.puts "Assertion: #{expected.inspect}#{operator =~ /^\W/ ? ' ' : '.'}#{operator} #{actual.inspect}"
  exit 1
end

def self.no_more_args!(args)
  assert! "Should not be any arguments after the filename!", [], :==, args
end

def self.to_integer!(name, value)
  assert! "#{name} should be an integer, not #{value.inspect}", value.to_i.to_s, :==, value
  value.to_i
end

def self.to_float!(name, value)
  Float value
rescue ArgumentError
  assert! "#{name} should be a float, not #{value.inspect}", value.to_f.to_s, :==, value
rescue TypeError
  assert! "#{name} was not provided", value, :!=, nil
end

def self.assert_file!(name, filename)
  assert! "No #{name} provided!", true, :==, !!filename
  assert! "Could not find #{name} (pwd: #{File.expand_path Dir.pwd})",
          File, :exist?, filename
end

# *sigh*
def self.weights_to_json(weight_iterations)
  jsonify_synapse = lambda do |synapse, margin|
    elements = synapse.map { |weights|
      "[#{weights.map { |weight| '%0.20f' % weight }.join(', ')}]"
    }.join("\n#{margin}, ")
    "[ #{elements}\n#{margin}]"
  end

  jsonify_synapses = lambda do |synapses, margin, do_break_first|
    elements = synapses.map { |synapse| jsonify_synapse.call synapse, "#{margin}  " }
                       .join("\n#{margin}, ")

    maybe_break = "\n#{margin}  " if do_break_first
    "[ #{maybe_break}#{elements}\n#{margin}]"
  end

  jsonify_iteration = lambda do |iteration, margin|
    final_json     = jsonify_synapses.call iteration[:final], "#{margin}  ", true
    sub_iterations = iteration[:sub_iterations]
                       .map { |synapses| jsonify_synapses.call synapses, "#{margin}    ", false }
                       .join("\n#{margin}  , ")

    json = %'{ "final": #{final_json},\n'
    if sub_iterations.empty?
      json << %'#{margin}  "sub_iterations": []\n'
    else
      json << %'#{margin}  "sub_iterations": [\n'
      json << %'#{margin}    #{sub_iterations}\n'
      json << %'#{margin}  ]\n'
    end
    json << %'#{margin}}'
  end

  jsonify_iterations = lambda do |iterations, margin|
    elements = iterations.map { |iteration| jsonify_iteration.call iteration, "#{margin}  " }
                         .join("\n#{margin}, ")
    "[ #{elements}\n#{margin}]"
  end

  jsonify_iterations.call(weight_iterations, '') << "\n"
end

def self.training_data_to_json(training_data)
  float  = lambda { |f| '% 2.20f' % f }
  floats = lambda { |a| "[#{a.map(&float).join(", ")}]" }
  elements = training_data.map { |ins, outs| "[#{floats[ins]}, #{floats[outs]}]" }.join("\n, ")
  "[ #{elements}\n]\n"
end

help_screen = <<-HELP_SCREEN
$ ruby #{__FILE__} command

  A program to train a neural network to convert polar coordinates to cartesian coordinates

Commands:

  help
    This screen

  generate weights $WEIGHTSFILE
    Randomly generate a set of weights and save them to $WEIGHTSFILE

  generate training $DATAFILE $QUANTITY
    Randomly generate $QUANTITY (int) sets of training data and save them in $DATAFILE

  train $DATAFILE $WEIGHTSFILE $SAVE_FREQ
    Train the set of weights in $WEIGHTSFILE against the training data in $DATAFILE
    The result will be saved back into $DATAFILE, as the next iteration of values (so we can see how they evolved)
    We will also record the results of the sub iteration every $SAVE_FREQ (int) times

  convert $RADIUS $ANGLE $WEIGHTSFILE [$ITERATION] [$SUBITERATION]
    Use the weights in $WEIGHTSFILE to convert the given $RADIUS (float) and $ANGLE (radians as a float).
    If no $ITERATION (int) is specified, the specific set of weights used will default to the final result from the last iteration
    If no $SUBITERATION is specific, we will use the final results from the specified $ITERATION
    Otherwise, we will use the results from $ITERATION, at the specific $SUBITERATION
HELP_SCREEN

command, *args = ARGV

if ['-h', '--help', 'help', nil].include? command
  puts help_screen
  exit 0
end

assert! "#{command.inspect} is not a supported command", ['help', 'generate', 'train', 'convert'], :include?, command

case command
when 'generate'
  type, *args = args
  assert! 'Generate expects either "weights" or "training" as the next arg', ['weights', 'training'], :include?, type

  if type == 'weights'
    weights_filename, *rest = ARGV[2..-1]
    no_more_args! rest
    weights = Polarnet.generate_weights([1, 15, 15, 2]) { rand * 0.1 }
    File.write weights_filename, weights_to_json(weights)
  elsif type == 'training'
    training_filename, quantity, *rest = args
    no_more_args! rest
    assert! "No $DATAFILE given!", training_filename, :kind_of?, String
    quantity = to_integer! 'Quantity', quantity
    data     = Polarnet.generate_training_data quantity
    File.write training_filename, training_data_to_json(data)
  end

when 'train'
  training_filename, weights_filename, save_frequency, *rest = args
  no_more_args! rest
  save_frequency = to_integer! 'Save frequency', (save_frequency||'0')
  assert_file! '$DATAFILE', training_filename
  assert_file! '$WEIGHTSFILE', weights_filename

  data            = JSON.parse File.read(training_filename), symbolize_names: true
  initial_weights = JSON.parse File.read(weights_filename),  symbolize_names: true
  post_data       = Polarnet.train weights, data, save_frequency.to_i

  File.write weights_filename, weights_to_json(post_data)

when 'convert'
  radius, angle, weights_filename, iteration, subiteration, *rest = args

  no_more_args! rest
  radius    = to_float!   '$RADIUS',       radius
  angle     = to_float!   '$ANGLE',        angle
  iteration = to_integer! '$ITERATION',    (iteration||'-1')
  to_integer!             '$SUBITERATION', (subiteration||'0')
  assert_file!            '$WEIGHTSFILE',  weights_filename

  all_weights       = JSON.parse File.read(weights_filename), symbolize_names: true
  iteration_weights = all_weights[iteration]
  assert! "There is no iteration #{iteration}, max value: #{all_weights.length}", true, :==, !!iteration_weights

  if subiteration
    subiteration         = subiteration.to_i
    subiteration_weights = iteration_weights[:sub_iterations]
    weights              = subiteration_weights[subiteration]
    assert! "There is no subiteration #{subiteration}, max value: #{iteration_weights.length}", true, :==, !!weights
  else
    weights = iteration_weights[:final]
  end

  inputs   = Polarnet.to_inputs angle
  outputs  = Polarnet.convert inputs, weights, &Math.method(:tanh)
  errors   = Polarnet.errors_for angle, outputs
  actual   = Polarnet.interpret_outputs radius, outputs
  expected = Polarnet.to_cartesian radius, angle

  puts "Weights: #{weights.inspect}"
  puts "Inputs:  #{inputs.inspect}"
  puts "Outputs: #{outputs.inspect}"
  puts "Errors:  #{errors.inspect}"
  puts "Expected (#{expected.join ', '})"
  puts "Actual   (#{actual.join ', '})"
end
